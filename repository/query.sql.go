// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package repository

import (
	"context"
)

const getByPrefix = `-- name: GetByPrefix :one
SELECT word, COUNT(word) FROM words WHERE word LIKE $1 GROUP BY word ORDER BY COUNT(word) DESC LIMIT 1
`

type GetByPrefixRow struct {
	Word  string
	Count int64
}

func (q *Queries) GetByPrefix(ctx context.Context, word string) (GetByPrefixRow, error) {
	row := q.db.QueryRow(ctx, getByPrefix, word)
	var i GetByPrefixRow
	err := row.Scan(&i.Word, &i.Count)
	return i, err
}

const insertWord = `-- name: InsertWord :exec
INSERT INTO words (word) VALUES ($1)
`

func (q *Queries) InsertWord(ctx context.Context, word string) error {
	_, err := q.db.Exec(ctx, insertWord, word)
	return err
}

const list = `-- name: List :many
SELECT word, COUNT(word) FROM words GROUP BY word
`

type ListRow struct {
	Word  string
	Count int64
}

func (q *Queries) List(ctx context.Context) ([]ListRow, error) {
	rows, err := q.db.Query(ctx, list)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRow
	for rows.Next() {
		var i ListRow
		if err := rows.Scan(&i.Word, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
